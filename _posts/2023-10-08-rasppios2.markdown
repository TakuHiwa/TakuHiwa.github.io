---
layout: post
title:  "RaspiOS Virtual Memory"
date: 2023-10-08 12:00:00 +0900
categories: jekyll update
---

# 仮想メモリの実装
9月に押し入れから取り出した厚手のパジャマズボンが暑いから、もうしまおうかなと思って部屋の脇に置いておいたのに、もう履くことになった。そんな急に寒くなるものだったかな？

[https://jsandler18.github.io/tutorial/wrangling-mem.html](https://jsandler18.github.io/tutorial/wrangling-mem.html)<br>
これを参考に、
仮想メモリ部分を実装していきますー。
今日はどこまで進むのか。mallocが実装できるところまでが目標。
mallocは有効なメモリ場所を受け取る。
メモリ場所の型を変更
mem_init
まず何をするかを考える
## カーネルの直後のアドレスから使える
カーネル直後アドレスを取得したら、
それ以降から使えるメモリ / ページサイズから使えるページ数を記録
そもそもC言語のこの変数はどこに保存されてるの？
OSがないのにカーネル以前に読み込まれてしまうとダメ（動的確保ではない）
なのでコードが展開される際に、変数もbp以下に登録されるべき

## pageが利用する大きさを確保
ページが占領するメモリ領域は、プロセスが自由に使える領域とは異なる
ページ領域の後ろにフリーメモリが来る
ページはそれぞれ自由に使えるメモリアドレスを持つ
ページが占領するメモリ領域を０で初期化する(strings.h , bzero())
そしてページを全て作成する

## リストの作成・初期化
リストアドレスの、最初と最後を0で初期化
サイズももちろん0で

## リストの追加
全てのリストを順番に作り、追加していく
サイズはおそらく追加時に加算する
終了後、最後を最後尾ページアドレスにする

## ページサイズごとにアドレスを加算
各アドレスにページを割り当て

## ページのリストのnextを次のページにリンクさせる
双方向リスト　ページ内にnext, prevを配置
かつ、開始と終了から辿れる
リストは、ページの中にもあり（~~いやページ内のリストを利用する~~）

難しい。とにかくページ開始アドレスの取得、最初と最後の初期化までは完成した。書いていて面白いが、コードが複雑なのと、osが無い状態を考えて書かないといけない条件により、とても混乱。確かに、誰がページを確保してくれるんだろうね。今まさにそのOSを書いているというのに。