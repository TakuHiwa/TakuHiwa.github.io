<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-21T22:55:50+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Raspi OS 3 dev</title><subtitle>技術ブログ</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/09/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-09-18T00:46:38+09:00</published><updated>2023-09-18T00:46:38+09:00</updated><id>http://localhost:4000/jekyll/update/2023/09/18/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/09/18/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Part 1 - Raspberry Pi 3 OS</title><link href="http://localhost:4000/raspberry/pi/os/2023/09/18/rasppios1.html" rel="alternate" type="text/html" title="Part 1 - Raspberry Pi 3 OS" /><published>2023-09-18T00:46:38+09:00</published><updated>2023-09-18T00:46:38+09:00</updated><id>http://localhost:4000/raspberry/pi/os/2023/09/18/rasppios1</id><content type="html" xml:base="http://localhost:4000/raspberry/pi/os/2023/09/18/rasppios1.html"><![CDATA[<p>Raspi2でのブートの仕方を理解した。Raspi3で動作するようにarm-v8で書き換えて、qemuで動作できるようになった。
次はSDカードにロードしてRaspi3で動作できることが目標。
とは言っても画面上に文字を出さないと確認できないよね…</p>

<p>４つのCPUが一斉に命令を実行するが、and…の部分で0xFFに該当しないCPUコアが停止し、シングルコアとして動作する。
どうやってマルチコアを動作させるOSを書くんだろう？</p>

<figure class="highlight"><pre><code class="language-asm" data-lang="asm">.section ".text.boot"

.global _start

_start:
    mrs x0, mpidr_el1
    and x0, x0, #0xFF
    cbz    x0, master
    b halt

master:
    mov sp, #0x8000

    adr x0, bss_begin
    adr x1, bss_end
    sub x1, x1, x0
1:
memzero:
    str xzr, [x0], #8
    sub x1, x1, #8
    bgt 1b

    bl kernel_main

halt:
    wfe
    b halt</code></pre></figure>]]></content><author><name></name></author><category term="raspberry" /><category term="pi" /><category term="os" /><summary type="html"><![CDATA[Raspi2でのブートの仕方を理解した。Raspi3で動作するようにarm-v8で書き換えて、qemuで動作できるようになった。 次はSDカードにロードしてRaspi3で動作できることが目標。 とは言っても画面上に文字を出さないと確認できないよね…]]></summary></entry></feed>